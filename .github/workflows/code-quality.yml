name: Code Quality & Security Analysis

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      task:
        description: 'Analysis task to execute'
        required: true
        type: choice
        options:
          - full-scan
          - security-only
          - code-quality-only
          - performance-analysis

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: ESLint & Prettier
  lint-javascript:
    name: JavaScript/HTML Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: '. --ext .js,.html'
          fail_on_error: true

      - name: Check code formatting
        run: npx prettier --check "**/*.{js,html,css,json,md}"

  # Job 2: CodeQL Security Analysis
  codeql-analysis:
    name: CodeQL Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Job 3: SonarCloud Code Quality
  sonarcloud-scan:
    name: SonarCloud Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=dj-cloudio
            -Dsonar.organization=your-org
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/test/**,**/coverage/**
        continue-on-error: true

  # Job 4: Smart Contract Security (Slither)
  solidity-security:
    name: Smart Contract Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Slither
        run: |
          pip3 install slither-analyzer
          pip3 install solc-select
          solc-select install 0.8.20
          solc-select use 0.8.20

      - name: Run Slither on contracts
        working-directory: ./contracts
        run: |
          slither . \
            --exclude-dependencies \
            --exclude-informational \
            --exclude-low \
            --json slither-report.json \
            --markdown-root slither-report.md
        continue-on-error: true

      - name: Upload Slither results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: slither-security-report
          path: contracts/slither-report.*

      - name: Comment PR with Slither results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'contracts/slither-report.md';

            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Slither Security Analysis\n\n${report}`
              });
            }
        continue-on-error: true

  # Job 5: Dependency Security (npm audit & Snyk)
  dependency-security:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif
        continue-on-error: true

  # Job 6: Code Complexity Analysis
  complexity-analysis:
    name: Code Complexity Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install complexity tools
        run: npm install -g complexity-report jscpd

      - name: Analyze code complexity
        run: |
          echo "## Complexity Analysis" > complexity-report.md
          echo "" >> complexity-report.md

          # Find high complexity functions
          for file in $(find . -name "*.js" -not -path "*/node_modules/*"); do
            cr --format json "$file" > temp.json 2>/dev/null || true
            if [ -f temp.json ]; then
              echo "### $file" >> complexity-report.md
              cat temp.json >> complexity-report.md
              echo "" >> complexity-report.md
            fi
          done

          rm -f temp.json
        continue-on-error: true

      - name: Check code duplication
        run: |
          jscpd . --ignore "**/node_modules/**,**/coverage/**" \
            --format "markdown" \
            --output "./duplication-report.md"
        continue-on-error: true

      - name: Upload complexity reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: complexity-reports
          path: |
            complexity-report.md
            duplication-report.md

  # Job 7: PR Code Review (AI-assisted)
  ai-code-review:
    name: AI-Assisted Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.js
            **/*.html
            **/*.sol
            **/*.css

      - name: Analyze code changes
        id: analyze
        run: |
          echo "changed_files=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_OUTPUT

          # Create analysis summary
          cat > analysis.md << 'EOF'
          ## 🤖 Automated Code Review

          ### Changed Files
          ${{ steps.changed-files.outputs.all_changed_files }}

          ### Review Checklist
          - [ ] Code follows project style guidelines
          - [ ] No security vulnerabilities introduced
          - [ ] Tests added for new functionality
          - [ ] Documentation updated
          - [ ] No console.log statements in production code
          - [ ] Error handling implemented
          - [ ] Gas optimization considered (for smart contracts)

          ### Recommended Actions
          1. Run `npm test` locally
          2. Check ESLint warnings above
          3. Review CodeQL security alerts
          4. Verify Slither smart contract analysis
          EOF

          cat analysis.md

      - name: Post review comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysis = fs.readFileSync('analysis.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: analysis
            });

  # Job 8: Performance Benchmarking
  performance-analysis:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'performance-analysis' || github.event.inputs.task == 'full-scan'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd contracts && npm ci

      - name: Benchmark smart contracts gas usage
        working-directory: ./contracts
        run: |
          npx hardhat test --grep "Gas Optimization" > gas-report.txt
          cat gas-report.txt
        continue-on-error: true

      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Analysis" > bundle-report.md

          # Analyze JavaScript file sizes
          find . -name "*.js" -not -path "*/node_modules/*" -exec ls -lh {} \; | \
            awk '{print $5, $9}' | sort -h -r | head -20 >> bundle-report.md
        continue-on-error: true

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            contracts/gas-report.txt
            bundle-report.md

  # Job 9: Documentation Check
  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README exists
        run: |
          if [ ! -f README.md ]; then
            echo "ERROR: README.md not found"
            exit 1
          fi

      - name: Check smart contract documentation
        run: |
          echo "Checking NatSpec documentation in Solidity files..."

          missing_docs=0
          for file in $(find contracts -name "*.sol"); do
            if ! grep -q "@dev\|@notice\|@param\|@return" "$file"; then
              echo "WARNING: $file missing NatSpec documentation"
              missing_docs=$((missing_docs + 1))
            fi
          done

          if [ $missing_docs -gt 0 ]; then
            echo "Found $missing_docs files with missing documentation"
          else
            echo "All contracts have documentation!"
          fi

      - name: Check for TODOs in code
        run: |
          echo "## TODO Items Found" > todos.md
          grep -r "TODO\|FIXME\|HACK" --include="*.js" --include="*.sol" . || echo "No TODOs found"

  # Summary Job
  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [lint-javascript, codeql-analysis, dependency-security, documentation-check]
    if: always()
    steps:
      - name: Check quality gate
        run: |
          echo "## 🎯 Quality Gate Summary"
          echo ""
          echo "✅ JavaScript Linting: ${{ needs.lint-javascript.result }}"
          echo "✅ CodeQL Security: ${{ needs.codeql-analysis.result }}"
          echo "✅ Dependency Security: ${{ needs.dependency-security.result }}"
          echo "✅ Documentation: ${{ needs.documentation-check.result }}"

          if [ "${{ needs.lint-javascript.result }}" != "success" ] || \
             [ "${{ needs.codeql-analysis.result }}" != "success" ]; then
            echo ""
            echo "❌ Quality gate FAILED"
            exit 1
          else
            echo ""
            echo "✅ Quality gate PASSED"
          fi
