name: Claude Code DevOps Integration

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      task:
        description: 'Task for Claude Code to execute'
        required: true
        type: choice
        options:
          - code-review
          - fix-bugs
          - refactor
          - add-tests
          - update-docs
          - security-audit
          - optimize-performance

jobs:
  # Automated Code Review with Claude Code
  claude-code-review:
    name: Claude Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.js
            **/*.html
            **/*.sol
            **/*.css

      - name: Setup Claude Code CLI
        run: |
          curl -fsSL https://claude.ai/install.sh | sh
          claude --version

      - name: Run Claude Code Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > review_prompt.txt << 'EOF'
          Review the following code changes for:
          1. Code quality and best practices
          2. Security vulnerabilities
          3. Performance issues
          4. Potential bugs
          5. Documentation completeness

          Changed files:
          ${{ steps.changed-files.outputs.all_changed_files }}

          Provide specific, actionable feedback with line numbers.
          EOF

          claude chat --file review_prompt.txt --output review_results.md

      - name: Post review as PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review_results.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 Claude Code Review\n\n${review}`
            });

  # Automated Bug Fixing
  claude-auto-fix:
    name: Claude Auto-Fix Issues
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' &&
      contains(github.event.comment.body, '/claude fix')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Claude Code
        run: |
          curl -fsSL https://claude.ai/install.sh | sh
          claude --version

      - name: Extract issue details
        id: issue
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "issue_body=$ISSUE_BODY" >> $GITHUB_OUTPUT

      - name: Run Claude Code to fix issue
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > fix_prompt.txt << 'EOF'
          Fix the following issue in the codebase:

          Issue: ${{ steps.issue.outputs.issue_body }}

          Steps:
          1. Identify the root cause
          2. Implement the fix
          3. Add tests to prevent regression
          4. Update documentation if needed
          EOF

          claude execute --file fix_prompt.txt --auto-commit

      - name: Create Pull Request with fix
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "🤖 Claude Code: Auto-fix issue #${{ github.event.issue.number }}"
          branch: claude-autofix-${{ github.event.issue.number }}
          title: "🤖 Auto-fix: ${{ github.event.issue.title }}"
          body: |
            ## Automated Fix by Claude Code

            Fixes #${{ github.event.issue.number }}

            This PR was automatically generated by Claude Code to address the reported issue.

            **Changes:**
            - Root cause identified and fixed
            - Tests added to prevent regression
            - Documentation updated

            Please review the changes before merging.

  # Smart Contract Testing with Claude Code
  claude-contract-test:
    name: Claude Smart Contract Testing
    runs-on: ubuntu-latest
    if: |
      contains(github.event.head_commit.message, '[contracts]') ||
      github.event.inputs.task == 'add-tests'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Setup Claude Code
        run: |
          curl -fsSL https://claude.ai/install.sh | sh

      - name: Generate comprehensive tests
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > test_prompt.txt << 'EOF'
          Analyze the smart contracts in ./contracts/contracts/ and:

          1. Generate comprehensive test suites for:
             - RitualDAO.sol (voting, proposals, finalization)
             - PropheticSessionNFT.sol (minting, metadata, transfers)

          2. Include edge cases and security tests:
             - Reentrancy attacks
             - Integer overflow/underflow
             - Access control
             - Gas optimization

          3. Achieve >90% code coverage

          Write tests to ./contracts/test/
          EOF

          claude execute --file test_prompt.txt

      - name: Run generated tests
        working-directory: ./contracts
        run: |
          npm ci
          npx hardhat test
          npx hardhat coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: contract-coverage
          path: contracts/coverage/

  # Security Audit with Claude Code
  claude-security-audit:
    name: Claude Security Audit
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.task == 'security-audit'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Claude Code
        run: |
          curl -fsSL https://claude.ai/install.sh | sh

      - name: Run comprehensive security audit
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > audit_prompt.txt << 'EOF'
          Perform a comprehensive security audit of the DJ Cloudio application:

          **Smart Contracts:**
          - Check for OWASP Top 10 vulnerabilities
          - Verify access controls
          - Test for reentrancy attacks
          - Review gas optimization
          - Check for front-running risks

          **Frontend:**
          - XSS vulnerabilities
          - CSRF protection
          - Secure Web3 integration
          - Private key handling
          - Input validation

          **Infrastructure:**
          - Environment variable security
          - API key exposure
          - Dependency vulnerabilities

          Generate detailed report with:
          1. Severity levels (Critical, High, Medium, Low)
          2. Specific code locations
          3. Recommended fixes
          4. Mitigation strategies
          EOF

          claude analyze --file audit_prompt.txt --output security_audit.md

      - name: Create security issue if vulnerabilities found
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const audit = fs.readFileSync('security_audit.md', 'utf8');

            if (audit.includes('Critical') || audit.includes('High')) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Security Vulnerabilities Detected by Claude Code',
                body: audit,
                labels: ['security', 'priority-high']
              });
            }

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: security-audit
          path: security_audit.md

  # Performance Optimization
  claude-optimize:
    name: Claude Performance Optimization
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.task == 'optimize-performance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Claude Code
        run: |
          curl -fsSL https://claude.ai/install.sh | sh

      - name: Analyze performance bottlenecks
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > optimize_prompt.txt << 'EOF'
          Optimize performance of DJ Cloudio application:

          **Web Audio Processing:**
          - Reduce latency in neural-audio-bridge.js
          - Optimize transition algorithms
          - Improve stem separation performance

          **Smart Contracts:**
          - Gas optimization for RitualDAO voting
          - Optimize NFT minting costs
          - Batch operations where possible

          **Frontend:**
          - Reduce bundle size
          - Lazy load modules
          - Optimize event bus performance
          - Cache optimization

          Implement optimizations and measure improvements.
          EOF

          claude optimize --file optimize_prompt.txt --benchmark

      - name: Create optimization PR
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "⚡ Performance optimizations by Claude Code"
          branch: claude-optimize-performance
          title: "⚡ Performance Optimizations"
          body: |
            ## Performance Optimizations by Claude Code

            Automated performance improvements including:
            - Web Audio latency reduction
            - Smart contract gas optimization
            - Frontend bundle size reduction
            - Event bus optimization

            **Benchmarks:** See attached performance report

  # Documentation Updates
  claude-docs-update:
    name: Claude Documentation Update
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.task == 'update-docs'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Claude Code
        run: |
          curl -fsSL https://claude.ai/install.sh | sh

      - name: Generate comprehensive documentation
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > docs_prompt.txt << 'EOF'
          Update and enhance documentation for DJ Cloudio:

          1. **README.md** - Complete project overview, features, setup
          2. **API Documentation** - All modules and functions
          3. **Smart Contract Docs** - Contract interfaces and usage
          4. **User Guide** - Step-by-step tutorials
          5. **Developer Guide** - Architecture and contribution guidelines
          6. **Deployment Guide** - Already exists, ensure completeness

          Ensure all code examples are tested and up-to-date.
          EOF

          claude document --file docs_prompt.txt --format markdown

      - name: Create docs PR
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "📚 Documentation updates by Claude Code"
          branch: claude-docs-update
          title: "📚 Comprehensive Documentation Update"
          body: |
            ## Documentation Updates by Claude Code

            Enhanced and updated documentation including:
            - Complete API documentation
            - User and developer guides
            - Smart contract documentation
            - Code examples and tutorials

  # Continuous Refactoring
  claude-refactor:
    name: Claude Code Refactoring
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.task == 'refactor'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Claude Code
        run: |
          curl -fsSL https://claude.ai/install.sh | sh

      - name: Analyze and refactor codebase
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > refactor_prompt.txt << 'EOF'
          Refactor DJ Cloudio codebase for better maintainability:

          **Focus Areas:**
          1. Extract duplicate code into reusable functions
          2. Improve naming conventions
          3. Enhance error handling
          4. Add TypeScript types/JSDoc comments
          5. Modularize large functions
          6. Apply SOLID principles

          **Files to prioritize:**
          - neural-ai-autopilot.js (large decision tree)
          - neural-ai-transitions.js (duplicate transition logic)
          - neuralmix_enhanced_fixed.html (long UI functions)

          Maintain backward compatibility and existing functionality.
          EOF

          claude refactor --file refactor_prompt.txt --safe

      - name: Create refactoring PR
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "♻️ Code refactoring by Claude Code"
          branch: claude-refactor
          title: "♻️ Code Refactoring for Better Maintainability"
          body: |
            ## Code Refactoring by Claude Code

            Improvements:
            - Extracted duplicate code
            - Improved naming conventions
            - Enhanced error handling
            - Added type documentation
            - Modularized large functions

            All existing functionality preserved.

  # Deployment Validation
  claude-validate-deployment:
    name: Claude Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-testnet, deploy-frontend]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Claude Code
        run: |
          curl -fsSL https://claude.ai/install.sh | sh

      - name: Validate deployment
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cat > validate_prompt.txt << 'EOF'
          Validate the DJ Cloudio deployment:

          **Smart Contracts (Base Sepolia):**
          - Check contracts are verified on BaseScan
          - Validate voting functionality
          - Test NFT minting
          - Verify event emissions

          **Frontend:**
          - Verify all modules load correctly
          - Test wallet connection
          - Validate DAO voting flow
          - Test NFT minting flow
          - Check performance metrics

          **Integration:**
          - End-to-end user journey test
          - Cross-browser compatibility
          - Mobile responsiveness

          Generate deployment validation report.
          EOF

          claude validate --file validate_prompt.txt --output validation_report.md

      - name: Post validation results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation_report.md', 'utf8');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '✅ Deployment Validation Report',
              body: report,
              labels: ['deployment', 'validation']
            });
