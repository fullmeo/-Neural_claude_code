name: DJ Cloudio CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  DEPLOY_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

jobs:
  # Job 1: Lint and Code Quality
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd contracts && npm ci

      - name: Run ESLint
        run: npx eslint . --ext .js,.html --max-warnings 0
        continue-on-error: true

      - name: Run Prettier check
        run: npx prettier --check "**/*.{js,html,css,json,md}"
        continue-on-error: true

  # Job 2: Smart Contract Tests
  smart-contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install contract dependencies
        working-directory: ./contracts
        run: npm ci

      - name: Compile contracts
        working-directory: ./contracts
        run: npx hardhat compile

      - name: Run contract tests
        working-directory: ./contracts
        run: npx hardhat test

      - name: Generate coverage report
        working-directory: ./contracts
        run: npx hardhat coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./contracts/coverage/coverage-final.json
          flags: smart-contracts
        continue-on-error: true

  # Job 3: Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        run: npm test -- --coverage
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/

  # Job 4: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Smart contract security audit (Slither)
        working-directory: ./contracts
        run: |
          pip3 install slither-analyzer
          slither . --exclude-dependencies
        continue-on-error: true

  # Job 5: Deploy to Testnet (Base Sepolia)
  deploy-testnet:
    name: Deploy to Base Sepolia Testnet
    runs-on: ubuntu-latest
    needs: [code-quality, smart-contract-tests, frontend-tests, security-audit]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: testnet
      url: https://sepolia.basescan.org
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install contract dependencies
        working-directory: ./contracts
        run: npm ci

      - name: Deploy to Base Sepolia
        working-directory: ./contracts
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          BASE_SEPOLIA_RPC_URL: ${{ secrets.BASE_SEPOLIA_RPC_URL }}
        run: |
          npx hardhat compile
          npx hardhat run scripts/deploy.js --network baseSepolia > deployment-output.txt
          cat deployment-output.txt

      - name: Extract contract addresses
        id: contract-addresses
        working-directory: ./contracts
        run: |
          DAO_ADDRESS=$(grep -oP 'RitualDAO deployed to: \K0x[a-fA-F0-9]{40}' deployment-output.txt)
          NFT_ADDRESS=$(grep -oP 'PropheticSessionNFT deployed to: \K0x[a-fA-F0-9]{40}' deployment-output.txt)
          echo "dao_address=$DAO_ADDRESS" >> $GITHUB_OUTPUT
          echo "nft_address=$NFT_ADDRESS" >> $GITHUB_OUTPUT

      - name: Update frontend config
        run: |
          sed -i "s/dao: '.*'/dao: '${{ steps.contract-addresses.outputs.dao_address }}'/" neural-web3-connector.js
          sed -i "s/nft: '.*'/nft: '${{ steps.contract-addresses.outputs.nft_address }}'/" neural-web3-connector.js

      - name: Verify contracts on BaseScan
        working-directory: ./contracts
        env:
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        run: |
          npx hardhat verify --network baseSepolia ${{ steps.contract-addresses.outputs.dao_address }}
          npx hardhat verify --network baseSepolia ${{ steps.contract-addresses.outputs.nft_address }}
        continue-on-error: true

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: testnet-deployment
          path: |
            contracts/deployments/
            contracts/deployment-output.txt

  # Job 6: Deploy Frontend (Netlify/Vercel)
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-testnet]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build frontend
        run: |
          npm ci
          npm run build
        continue-on-error: true

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Job 7: Deploy to Mainnet (Base)
  deploy-mainnet:
    name: Deploy to Base Mainnet
    runs-on: ubuntu-latest
    needs: [code-quality, smart-contract-tests, frontend-tests, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://basescan.org
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install contract dependencies
        working-directory: ./contracts
        run: npm ci

      - name: Deploy to Base Mainnet
        working-directory: ./contracts
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          BASE_RPC_URL: ${{ secrets.BASE_RPC_URL }}
        run: |
          npx hardhat compile
          npx hardhat run scripts/deploy.js --network base > deployment-output.txt
          cat deployment-output.txt

      - name: Extract mainnet contract addresses
        id: mainnet-addresses
        working-directory: ./contracts
        run: |
          DAO_ADDRESS=$(grep -oP 'RitualDAO deployed to: \K0x[a-fA-F0-9]{40}' deployment-output.txt)
          NFT_ADDRESS=$(grep -oP 'PropheticSessionNFT deployed to: \K0x[a-fA-F0-9]{40}' deployment-output.txt)
          echo "dao_address=$DAO_ADDRESS" >> $GITHUB_OUTPUT
          echo "nft_address=$NFT_ADDRESS" >> $GITHUB_OUTPUT

      - name: Verify mainnet contracts
        working-directory: ./contracts
        env:
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        run: |
          npx hardhat verify --network base ${{ steps.mainnet-addresses.outputs.dao_address }}
          npx hardhat verify --network base ${{ steps.mainnet-addresses.outputs.nft_address }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Production Release v${{ github.run_number }}
          body: |
            ## DJ Cloudio Production Deployment

            **Smart Contracts Deployed to Base Mainnet:**
            - RitualDAO: ${{ steps.mainnet-addresses.outputs.dao_address }}
            - PropheticSessionNFT: ${{ steps.mainnet-addresses.outputs.nft_address }}

            **Frontend:** https://djcloudio.netlify.app

            **BaseScan:** https://basescan.org/address/${{ steps.mainnet-addresses.outputs.dao_address }}
          draft: false
          prerelease: false

  # Job 8: Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-mainnet]
    if: always()
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "DJ Cloudio Deployment Status: ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*DJ Cloudio CI/CD Pipeline*\nStatus: ${{ job.status }}\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}"
                  }
                }
              ]
            }
        continue-on-error: true

      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "DJ Cloudio Deployment"
          description: "Pipeline completed with status: ${{ job.status }}"
        continue-on-error: true
